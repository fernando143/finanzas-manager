// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  incomes      Income[]
  expenses     Expense[]
  categories   Category[]
  savingsGoals SavingsGoal[]
  investments  Investment[]
  budgets      Budget[]
  debts        Debt[]
  accounts     Account[]

  @@map("users")
}

// Modelo de Categorías
model Category {
  id       String      @id @default(cuid())
  name     String
  type     CategoryType
  color    String?
  parentId String?
  userId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relaciones
  user     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  incomes  Income[]
  expenses Expense[]
  budgetAllocations BudgetAllocation[]

  @@index([type])
  @@index([userId])
  @@map("categories")
}

// Modelo de Ingresos
model Income {
  id          String    @id @default(cuid())
  description String
  amount      Decimal   @db.Decimal(12, 2)
  categoryId  String
  frequency   Frequency
  incomeDate  DateTime
  nextDate    DateTime?
  isActive    Boolean   @default(true)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([incomeDate])
  @@index([frequency])
  @@map("incomes")
}

// Modelo de Gastos
model Expense {
  id          String        @id @default(cuid())
  description String
  amount      Decimal       @db.Decimal(12, 2)
  categoryId  String
  frequency   Frequency
  dueDate     DateTime?
  status      ExpenseStatus @default(PENDING)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relaciones
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([dueDate])
  @@index([status])
  @@map("expenses")
}

// Modelo de Metas de Ahorro
model SavingsGoal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Decimal   @db.Decimal(12, 2)
  currentAmount Decimal   @default(0) @db.Decimal(12, 2)
  targetDate    DateTime
  priority      Priority
  timeframe     Timeframe
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([targetDate])
  @@index([priority])
  @@map("savings_goals")
}

// Modelo de Inversiones
model Investment {
  id            String         @id @default(cuid())
  name          String
  type          InvestmentType
  symbol        String?
  amount        Decimal        @db.Decimal(12, 2)
  purchasePrice Decimal        @db.Decimal(12, 2)
  currentPrice  Decimal        @db.Decimal(12, 2)
  quantity      Decimal        @db.Decimal(12, 4)
  purchaseDate  DateTime
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([symbol])
  @@map("investments")
}

// Modelo de Presupuestos
model Budget {
  id          String       @id @default(cuid())
  name        String
  period      BudgetPeriod
  totalAmount Decimal      @db.Decimal(12, 2)
  startDate   DateTime
  endDate     DateTime
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations BudgetAllocation[]

  @@index([userId])
  @@index([startDate, endDate])
  @@map("budgets")
}

// Modelo de Asignaciones de Presupuesto
model BudgetAllocation {
  id         String  @id @default(cuid())
  budgetId   String
  categoryId String
  amount     Decimal @db.Decimal(12, 2)
  spent      Decimal @default(0) @db.Decimal(12, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@index([budgetId])
  @@index([categoryId])
  @@map("budget_allocations")
}

// Modelo de Deudas
model Debt {
  id              String          @id @default(cuid())
  name            String
  type            DebtType
  totalAmount     Decimal         @db.Decimal(12, 2)
  currentBalance  Decimal         @db.Decimal(12, 2)
  interestRate    Decimal         @db.Decimal(5, 4)
  minimumPayment  Decimal         @db.Decimal(12, 2)
  dueDate         DateTime
  paymentStrategy PaymentStrategy
  userId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([dueDate])
  @@map("debts")
}

// Modelo de Cuentas
model Account {
  id        String      @id @default(cuid())
  name      String
  type      AccountType
  balance   Decimal     @db.Decimal(12, 2)
  currency  String      @default("MXN")
  isActive  Boolean     @default(true)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("accounts")
}

// Enums
enum CategoryType {
  INCOME
  EXPENSE
}

enum Frequency {
  MONTHLY
  BIWEEKLY
  WEEKLY
  ANNUAL
  ONE_TIME
}

enum ExpenseStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Timeframe {
  SHORT   // 1-12 meses
  MEDIUM  // 1-5 años
  LONG    // 5+ años
}

enum InvestmentType {
  STOCKS
  BONDS
  FUNDS
  CRYPTO
  OTHER
}

enum BudgetPeriod {
  MONTHLY
  ANNUAL
}

enum DebtType {
  CREDIT_CARD
  LOAN
  MORTGAGE
  OTHER
}

enum PaymentStrategy {
  MINIMUM
  SNOWBALL
  AVALANCHE
  CUSTOM
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}
